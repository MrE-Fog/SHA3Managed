using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SHA3Managed.Tester
{
    public class TestCases
    {
        public struct TestCase
        {
            public byte[] Input;
            public byte[] Key;
            public byte[] Result;
        }

        // Pulled from NIST examples

        internal TestCase[] _SHA3_224 = new TestCase[2];
        internal TestCase[] _SHA3_256 = new TestCase[2];
        internal TestCase[] _SHA3_384 = new TestCase[2];
        internal TestCase[] _SHA3_512 = new TestCase[2];
        internal TestCase[] _SHAKE128 = new TestCase[2];
        internal TestCase[] _SHAKE256 = new TestCase[2];
        internal TestCase[] _HSHA3_224 = new TestCase[4];
        internal TestCase[] _HSHA3_256 = new TestCase[4];
        internal TestCase[] _HSHA3_384 = new TestCase[4];
        internal TestCase[] _HSHA3_512 = new TestCase[4];
        internal TestCase[] _HSHAKE128 = new TestCase[4];
        internal TestCase[] _HSHAKE256 = new TestCase[4];
        public TestCase[] SHA3_224 { get { return _SHA3_224; } }
        public TestCase[] SHA3_256 { get { return _SHA3_256; } }
        public TestCase[] SHA3_384 { get { return _SHA3_384; } }
        public TestCase[] SHA3_512 { get { return _SHA3_512; } }
        public TestCase[] SHAKE128 { get { return _SHAKE128; } }
        public TestCase[] SHAKE256 { get { return _SHAKE256; } }
        public TestCase[] HMACSHA3_224 { get { return _HSHA3_224; } }
        public TestCase[] HMACSHA3_256 { get { return _HSHA3_256; } }
        public TestCase[] HMACSHA3_384 { get { return _HSHA3_384; } }
        public TestCase[] HMACSHA3_512 { get { return _HSHA3_512; } }
        //public TestCase[] HMACSHAKE128 { get { return _HSHAKE128; } }
        //public TestCase[] HMACSHAKE256 { get { return _HSHAKE256; } }

        public TestCases()
        {
            _SHA3_224[0] = new TestCase
            {
                Input = new byte[] { }, // empty string
                Key = null,
                Result = new byte[] {
                    0x6B, 0x4E, 0x03, 0x42, 0x36, 0x67, 0xDB, 0xB7, 0x3B, 0x6E, 0x15, 0x45, 0x4F, 0x0E, 0xB1, 0xAB,
                    0xD4, 0x59, 0x7F, 0x9A, 0x1B, 0x07, 0x8E, 0x3F, 0x5B, 0x5A, 0x6B, 0xC7
                }
            };

            _SHA3_224[1] = new TestCase
            {
                Input = new byte[200], // msg = 1600 bits, defined later
                Key = null,
                Result = new byte[] {
                    0x93, 0x76, 0x81, 0x6A, 0xBA, 0x50, 0x3F, 0x72, 0xF9, 0x6C, 0xE7, 0xEB, 0x65, 0xAC, 0x09, 0x5D,
                    0xEE, 0xE3, 0xBE, 0x4B, 0xF9, 0xBB, 0xC2, 0xA1, 0xCB, 0x7E, 0x11, 0xE0
                }
            };

            _SHA3_256[0] = new TestCase
            {
                Input = new byte[] { }, // empty string
                Key = null,
                Result = new byte[] {
                    0xA7, 0xFF, 0xC6, 0xF8, 0xBF, 0x1E, 0xD7, 0x66, 0x51, 0xC1, 0x47, 0x56, 0xA0, 0x61, 0xD6, 0x62,
                    0xF5, 0x80, 0xFF, 0x4D, 0xE4, 0x3B, 0x49, 0xFA, 0x82, 0xD8, 0x0A, 0x4B, 0x80, 0xF8, 0x43, 0x4A
                }
            };

            _SHA3_256[1] = new TestCase
            {
                Input = new byte[200], // msg = 1600 bits, defined later
                Key = null,
                Result = new byte[] {
                    0x79, 0xF3, 0x8A, 0xDE, 0xC5, 0xC2, 0x03, 0x07, 0xA9, 0x8E, 0xF7, 0x6E, 0x83, 0x24, 0xAF, 0xBF,
                    0xD4, 0x6C, 0xFD, 0x81, 0xB2, 0x2E, 0x39, 0x73, 0xC6, 0x5F, 0xA1, 0xBD, 0x9D, 0xE3, 0x17, 0x87
                }
            };

            _SHA3_384[0] = new TestCase
            {
                Input = new byte[] { }, // empty string
                Key = null,
                Result = new byte[] {
                    0x0C, 0x63, 0xA7, 0x5B, 0x84, 0x5E, 0x4F, 0x7D, 0x01, 0x10, 0x7D, 0x85, 0x2E, 0x4C, 0x24, 0x85,
                    0xC5, 0x1A, 0x50, 0xAA, 0xAA, 0x94, 0xFC, 0x61, 0x99, 0x5E, 0x71, 0xBB, 0xEE, 0x98, 0x3A, 0x2A,
                    0xC3, 0x71, 0x38, 0x31, 0x26, 0x4A, 0xDB, 0x47, 0xFB, 0x6B, 0xD1, 0xE0, 0x58, 0xD5, 0xF0, 0x04
                }
            };

            _SHA3_384[1] = new TestCase
            {
                Input = new byte[200], // msg = 1600 bits, defined later
                Key = null,
                Result = new byte[] {
                    0x18, 0x81, 0xDE, 0x2C, 0xA7, 0xE4, 0x1E, 0xF9, 0x5D, 0xC4, 0x73, 0x2B, 0x8F, 0x5F, 0x00, 0x2B,
                    0x18, 0x9C, 0xC1, 0xE4, 0x2B, 0x74, 0x16, 0x8E, 0xD1, 0x73, 0x26, 0x49, 0xCE, 0x1D, 0xBC, 0xDD,
                    0x76, 0x19, 0x7A, 0x31, 0xFD, 0x55, 0xEE, 0x98, 0x9F, 0x2D, 0x70, 0x50, 0xDD, 0x47, 0x3E, 0x8F
                }
            };

            _SHA3_512[0] = new TestCase
            {
                Input = new byte[] { }, // empty string
                Key = null,
                Result = new byte[] {
                    0xA6, 0x9F, 0x73, 0xCC, 0xA2, 0x3A, 0x9A, 0xC5, 0xC8, 0xB5, 0x67, 0xDC, 0x18, 0x5A, 0x75, 0x6E,
                    0x97, 0xC9, 0x82, 0x16, 0x4F, 0xE2, 0x58, 0x59, 0xE0, 0xD1, 0xDC, 0xC1, 0x47, 0x5C, 0x80, 0xA6,
                    0x15, 0xB2, 0x12, 0x3A, 0xF1, 0xF5, 0xF9, 0x4C, 0x11, 0xE3, 0xE9, 0x40, 0x2C, 0x3A, 0xC5, 0x58,
                    0xF5, 0x00, 0x19, 0x9D, 0x95, 0xB6, 0xD3, 0xE3, 0x01, 0x75, 0x85, 0x86, 0x28, 0x1D, 0xCD, 0x26
                }
            };

            _SHA3_512[1] = new TestCase
            {
                Input = new byte[200], // msg = 1600 bits, defined later
                Key = null,
                Result = new byte[] {
                    0xE7, 0x6D, 0xFA, 0xD2, 0x20, 0x84, 0xA8, 0xB1, 0x46, 0x7F, 0xCF, 0x2F, 0xFA, 0x58, 0x36, 0x1B,
                    0xEC, 0x76, 0x28, 0xED, 0xF5, 0xF3, 0xFD, 0xC0, 0xE4, 0x80, 0x5D, 0xC4, 0x8C, 0xAE, 0xEC, 0xA8,
                    0x1B, 0x7C, 0x13, 0xC3, 0x0A, 0xDF, 0x52, 0xA3, 0x65, 0x95, 0x84, 0x73, 0x9A, 0x2D, 0xF4, 0x6B,
                    0xE5, 0x89, 0xC5, 0x1C, 0xA1, 0xA4, 0xA8, 0x41, 0x6D, 0xF6, 0x54, 0x5A, 0x1C, 0xE8, 0xBA, 0x00
                }
            };

            _SHAKE128[0] = new TestCase
            {
                Input = new byte[] { }, // empty string
                Key = null,
                Result = new byte[] {
                    0x7F, 0x9C, 0x2B, 0xA4, 0xE8, 0x8F, 0x82, 0x7D, 0x61, 0x60, 0x45, 0x50, 0x76, 0x05, 0x85, 0x3E,
                    0xD7, 0x3B, 0x80, 0x93, 0xF6, 0xEF, 0xBC, 0x88, 0xEB, 0x1A, 0x6E, 0xAC, 0xFA, 0x66, 0xEF, 0x26,
                    0x3C, 0xB1, 0xEE, 0xA9, 0x88, 0x00, 0x4B, 0x93, 0x10, 0x3C, 0xFB, 0x0A, 0xEE, 0xFD, 0x2A, 0x68,
                    0x6E, 0x01, 0xFA, 0x4A, 0x58, 0xE8, 0xA3, 0x63, 0x9C, 0xA8, 0xA1, 0xE3, 0xF9, 0xAE, 0x57, 0xE2,
                    0x35, 0xB8, 0xCC, 0x87, 0x3C, 0x23, 0xDC, 0x62, 0xB8, 0xD2, 0x60, 0x16, 0x9A, 0xFA, 0x2F, 0x75,
                    0xAB, 0x91, 0x6A, 0x58, 0xD9, 0x74, 0x91, 0x88, 0x35, 0xD2, 0x5E, 0x6A, 0x43, 0x50, 0x85, 0xB2,
                    0xBA, 0xDF, 0xD6, 0xDF, 0xAA, 0xC3, 0x59, 0xA5, 0xEF, 0xBB, 0x7B, 0xCC, 0x4B, 0x59, 0xD5, 0x38,
                    0xDF, 0x9A, 0x04, 0x30, 0x2E, 0x10, 0xC8, 0xBC, 0x1C, 0xBF, 0x1A, 0x0B, 0x3A, 0x51, 0x20, 0xEA,
                    0x17, 0xCD, 0xA7, 0xCF, 0xAD, 0x76, 0x5F, 0x56, 0x23, 0x47, 0x4D, 0x36, 0x8C, 0xCC, 0xA8, 0xAF,
                    0x00, 0x07, 0xCD, 0x9F, 0x5E, 0x4C, 0x84, 0x9F, 0x16, 0x7A, 0x58, 0x0B, 0x14, 0xAA, 0xBD, 0xEF,
                    0xAE, 0xE7, 0xEE, 0xF4, 0x7C, 0xB0, 0xFC, 0xA9, 0x76, 0x7B, 0xE1, 0xFD, 0xA6, 0x94, 0x19, 0xDF,
                    0xB9, 0x27, 0xE9, 0xDF, 0x07, 0x34, 0x8B, 0x19, 0x66, 0x91, 0xAB, 0xAE, 0xB5, 0x80, 0xB3, 0x2D,
                    0xEF, 0x58, 0x53, 0x8B, 0x8D, 0x23, 0xF8, 0x77, 0x32, 0xEA, 0x63, 0xB0, 0x2B, 0x4F, 0xA0, 0xF4,
                    0x87, 0x33, 0x60, 0xE2, 0x84, 0x19, 0x28, 0xCD, 0x60, 0xDD, 0x4C, 0xEE, 0x8C, 0xC0, 0xD4, 0xC9,
                    0x22, 0xA9, 0x61, 0x88, 0xD0, 0x32, 0x67, 0x5C, 0x8A, 0xC8, 0x50, 0x93, 0x3C, 0x7A, 0xFF, 0x15,
                    0x33, 0xB9, 0x4C, 0x83, 0x4A, 0xDB, 0xB6, 0x9C, 0x61, 0x15, 0xBA, 0xD4, 0x69, 0x2D, 0x86, 0x19,
                    0xF9, 0x0B, 0x0C, 0xDF, 0x8A, 0x7B, 0x9C, 0x26, 0x40, 0x29, 0xAC, 0x18, 0x5B, 0x70, 0xB8, 0x3F,
                    0x28, 0x01, 0xF2, 0xF4, 0xB3, 0xF7, 0x0C, 0x59, 0x3E, 0xA3, 0xAE, 0xEB, 0x61, 0x3A, 0x7F, 0x1B,
                    0x1D, 0xE3, 0x3F, 0xD7, 0x50, 0x81, 0xF5, 0x92, 0x30, 0x5F, 0x2E, 0x45, 0x26, 0xED, 0xC0, 0x96,
                    0x31, 0xB1, 0x09, 0x58, 0xF4, 0x64, 0xD8, 0x89, 0xF3, 0x1B, 0xA0, 0x10, 0x25, 0x0F, 0xDA, 0x7F,
                    0x13, 0x68, 0xEC, 0x29, 0x67, 0xFC, 0x84, 0xEF, 0x2A, 0xE9, 0xAF, 0xF2, 0x68, 0xE0, 0xB1, 0x70,
                    0x0A, 0xFF, 0xC6, 0x82, 0x0B, 0x52, 0x3A, 0x3D, 0x91, 0x71, 0x35, 0xF2, 0xDF, 0xF2, 0xEE, 0x06,
                    0xBF, 0xE7, 0x2B, 0x31, 0x24, 0x72, 0x1D, 0x4A, 0x26, 0xC0, 0x4E, 0x53, 0xA7, 0x5E, 0x30, 0xE7,
                    0x3A, 0x7A, 0x9C, 0x4A, 0x95, 0xD9, 0x1C, 0x55, 0xD4, 0x95, 0xE9, 0xF5, 0x1D, 0xD0, 0xB5, 0xE9,
                    0xD8, 0x3C, 0x6D, 0x5E, 0x8C, 0xE8, 0x03, 0xAA, 0x62, 0xB8, 0xD6, 0x54, 0xDB, 0x53, 0xD0, 0x9B,
                    0x8D, 0xCF, 0xF2, 0x73, 0xCD, 0xFE, 0xB5, 0x73, 0xFA, 0xD8, 0xBC, 0xD4, 0x55, 0x78, 0xBE, 0xC2,
                    0xE7, 0x70, 0xD0, 0x1E, 0xFD, 0xE8, 0x6E, 0x72, 0x1A, 0x3F, 0x7C, 0x6C, 0xCE, 0x27, 0x5D, 0xAB,
                    0xE6, 0xE2, 0x14, 0x3F, 0x1A, 0xF1, 0x8D, 0xA7, 0xEF, 0xDD, 0xC4, 0xC7, 0xB7, 0x0B, 0x5E, 0x34,
                    0x5D, 0xB9, 0x3C, 0xC9, 0x36, 0xBE, 0xA3, 0x23, 0x49, 0x1C, 0xCB, 0x38, 0xA3, 0x88, 0xF5, 0x46,
                    0xA9, 0xFF, 0x00, 0xDD, 0x4E, 0x13, 0x00, 0xB9, 0xB2, 0x15, 0x3D, 0x20, 0x41, 0xD2, 0x05, 0xB4,
                    0x43, 0xE4, 0x1B, 0x45, 0xA6, 0x53, 0xF2, 0xA5, 0xC4, 0x49, 0x2C, 0x1A, 0xDD, 0x54, 0x45, 0x12,
                    0xDD, 0xA2, 0x52, 0x98, 0x33, 0x46, 0x2B, 0x71, 0xA4, 0x1A, 0x45, 0xBE, 0x97, 0x29, 0x0B, 0x6F  }
            };
            _SHAKE128[1] = new TestCase
            {
                Input = new byte[200], // msg = 1600 bits, defined later
                Key = null,
                Result = new byte[] {
                    0x13, 0x1A, 0xB8, 0xD2, 0xB5, 0x94, 0x94, 0x6B, 0x9C, 0x81, 0x33, 0x3F, 0x9B, 0xB6, 0xE0, 0xCE,
                    0x75, 0xC3, 0xB9, 0x31, 0x04, 0xFA, 0x34, 0x69, 0xD3, 0x91, 0x74, 0x57, 0x38, 0x5D, 0xA0, 0x37,
                    0xCF, 0x23, 0x2E, 0xF7, 0x16, 0x4A, 0x6D, 0x1E, 0xB4, 0x48, 0xC8, 0x90, 0x81, 0x86, 0xAD, 0x85,
                    0x2D, 0x3F, 0x85, 0xA5, 0xCF, 0x28, 0xDA, 0x1A, 0xB6, 0xFE, 0x34, 0x38, 0x17, 0x19, 0x78, 0x46,
                    0x7F, 0x1C, 0x05, 0xD5, 0x8C, 0x7E, 0xF3, 0x8C, 0x28, 0x4C, 0x41, 0xF6, 0xC2, 0x22, 0x1A, 0x76,
                    0xF1, 0x2A, 0xB1, 0xC0, 0x40, 0x82, 0x66, 0x02, 0x50, 0x80, 0x22, 0x94, 0xFB, 0x87, 0x18, 0x02,
                    0x13, 0xFD, 0xEF, 0x5B, 0x0E, 0xCB, 0x7D, 0xF5, 0x0C, 0xA1, 0xF8, 0x55, 0x5B, 0xE1, 0x4D, 0x32,
                    0xE1, 0x0F, 0x6E, 0xDC, 0xDE, 0x89, 0x2C, 0x09, 0x42, 0x4B, 0x29, 0xF5, 0x97, 0xAF, 0xC2, 0x70,
                    0xC9, 0x04, 0x55, 0x6B, 0xFC, 0xB4, 0x7A, 0x7D, 0x40, 0x77, 0x8D, 0x39, 0x09, 0x23, 0x64, 0x2B,
                    0x3C, 0xBD, 0x05, 0x79, 0xE6, 0x09, 0x08, 0xD5, 0xA0, 0x00, 0xC1, 0xD0, 0x8B, 0x98, 0xEF, 0x93,
                    0x3F, 0x80, 0x64, 0x45, 0xBF, 0x87, 0xF8, 0xB0, 0x09, 0xBA, 0x9E, 0x94, 0xF7, 0x26, 0x61, 0x22,
                    0xED, 0x7A, 0xC2, 0x4E, 0x5E, 0x26, 0x6C, 0x42, 0xA8, 0x2F, 0xA1, 0xBB, 0xEF, 0xB7, 0xB8, 0xDB,
                    0x00, 0x66, 0xE1, 0x6A, 0x85, 0xE0, 0x49, 0x3F, 0x07, 0xDF, 0x48, 0x09, 0xAE, 0xC0, 0x84, 0xA5,
                    0x93, 0x74, 0x8A, 0xC3, 0xDD, 0xE5, 0xA6, 0xD7, 0xAA, 0xE1, 0xE8, 0xB6, 0xE5, 0x35, 0x2B, 0x2D,
                    0x71, 0xEF, 0xBB, 0x47, 0xD4, 0xCA, 0xEE, 0xD5, 0xE6, 0xD6, 0x33, 0x80, 0x5D, 0x2D, 0x32, 0x3E,
                    0x6F, 0xD8, 0x1B, 0x46, 0x84, 0xB9, 0x3A, 0x26, 0x77, 0xD4, 0x5E, 0x74, 0x21, 0xC2, 0xC6, 0xAE,
                    0xA2, 0x59, 0xB8, 0x55, 0xA6, 0x98, 0xFD, 0x7D, 0x13, 0x47, 0x7A, 0x1F, 0xE5, 0x3E, 0x5A, 0x4A,
                    0x61, 0x97, 0xDB, 0xEC, 0x5C, 0xE9, 0x5F, 0x50, 0x5B, 0x52, 0x0B, 0xCD, 0x95, 0x70, 0xC4, 0xA8,
                    0x26, 0x5A, 0x7E, 0x01, 0xF8, 0x9C, 0x0C, 0x00, 0x2C, 0x59, 0xBF, 0xEC, 0x6C, 0xD4, 0xA5, 0xC1,
                    0x09, 0x25, 0x89, 0x53, 0xEE, 0x5E, 0xE7, 0x0C, 0xD5, 0x77, 0xEE, 0x21, 0x7A, 0xF2, 0x1F, 0xA7,
                    0x01, 0x78, 0xF0, 0x94, 0x6C, 0x9B, 0xF6, 0xCA, 0x87, 0x51, 0x79, 0x34, 0x79, 0xF6, 0xB5, 0x37,
                    0x73, 0x7E, 0x40, 0xB6, 0xED, 0x28, 0x51, 0x1D, 0x8A, 0x2D, 0x7E, 0x73, 0xEB, 0x75, 0xF8, 0xDA,
                    0xAC, 0x91, 0x2F, 0xF9, 0x06, 0xE0, 0xAB, 0x95, 0x5B, 0x08, 0x3B, 0xAC, 0x45, 0xA8, 0xE5, 0xE9,
                    0xB7, 0x44, 0xC8, 0x50, 0x6F, 0x37, 0xE9, 0xB4, 0xE7, 0x49, 0xA1, 0x84, 0xB3, 0x0F, 0x43, 0xEB,
                    0x18, 0x8D, 0x85, 0x5F, 0x1B, 0x70, 0xD7, 0x1F, 0xF3, 0xE5, 0x0C, 0x53, 0x7A, 0xC1, 0xB0, 0xF8,
                    0x97, 0x4F, 0x0F, 0xE1, 0xA6, 0xAD, 0x29, 0x5B, 0xA4, 0x2F, 0x6A, 0xEC, 0x74, 0xD1, 0x23, 0xA7,
                    0xAB, 0xED, 0xDE, 0x6E, 0x2C, 0x07, 0x11, 0xCA, 0xB3, 0x6B, 0xE5, 0xAC, 0xB1, 0xA5, 0xA1, 0x1A,
                    0x4B, 0x1D, 0xB0, 0x8B, 0xA6, 0x98, 0x2E, 0xFC, 0xCD, 0x71, 0x69, 0x29, 0xA7, 0x74, 0x1C, 0xFC,
                    0x63, 0xAA, 0x44, 0x35, 0xE0, 0xB6, 0x9A, 0x90, 0x63, 0xE8, 0x80, 0x79, 0x5C, 0x3D, 0xC5, 0xEF,
                    0x32, 0x72, 0xE1, 0x1C, 0x49, 0x7A, 0x91, 0xAC, 0xF6, 0x99, 0xFE, 0xFE, 0xE2, 0x06, 0x22, 0x7A,
                    0x44, 0xC9, 0xFB, 0x35, 0x9F, 0xD5, 0x6A, 0xC0, 0xA9, 0xA7, 0x5A, 0x74, 0x3C, 0xFF, 0x68, 0x62,
                    0xF1, 0x7D, 0x72, 0x59, 0xAB, 0x07, 0x52, 0x16, 0xC0, 0x69, 0x95, 0x11, 0x64, 0x3B, 0x64, 0x39}
            };

            _SHAKE256[0] = new TestCase
            {
                Input = new byte[] { }, // empty string
                Key = null,
                Result = new byte[] {
                    0x46, 0xB9, 0xDD, 0x2B, 0x0B, 0xA8, 0x8D, 0x13, 0x23, 0x3B, 0x3F, 0xEB, 0x74, 0x3E, 0xEB, 0x24,
                    0x3F, 0xCD, 0x52, 0xEA, 0x62, 0xB8, 0x1B, 0x82, 0xB5, 0x0C, 0x27, 0x64, 0x6E, 0xD5, 0x76, 0x2F,
                    0xD7, 0x5D, 0xC4, 0xDD, 0xD8, 0xC0, 0xF2, 0x00, 0xCB, 0x05, 0x01, 0x9D, 0x67, 0xB5, 0x92, 0xF6,
                    0xFC, 0x82, 0x1C, 0x49, 0x47, 0x9A, 0xB4, 0x86, 0x40, 0x29, 0x2E, 0xAC, 0xB3, 0xB7, 0xC4, 0xBE,
                    0x14, 0x1E, 0x96, 0x61, 0x6F, 0xB1, 0x39, 0x57, 0x69, 0x2C, 0xC7, 0xED, 0xD0, 0xB4, 0x5A, 0xE3,
                    0xDC, 0x07, 0x22, 0x3C, 0x8E, 0x92, 0x93, 0x7B, 0xEF, 0x84, 0xBC, 0x0E, 0xAB, 0x86, 0x28, 0x53,
                    0x34, 0x9E, 0xC7, 0x55, 0x46, 0xF5, 0x8F, 0xB7, 0xC2, 0x77, 0x5C, 0x38, 0x46, 0x2C, 0x50, 0x10,
                    0xD8, 0x46, 0xC1, 0x85, 0xC1, 0x51, 0x11, 0xE5, 0x95, 0x52, 0x2A, 0x6B, 0xCD, 0x16, 0xCF, 0x86,
                    0xF3, 0xD1, 0x22, 0x10, 0x9E, 0x3B, 0x1F, 0xDD, 0x94, 0x3B, 0x6A, 0xEC, 0x46, 0x8A, 0x2D, 0x62,
                    0x1A, 0x7C, 0x06, 0xC6, 0xA9, 0x57, 0xC6, 0x2B, 0x54, 0xDA, 0xFC, 0x3B, 0xE8, 0x75, 0x67, 0xD6,
                    0x77, 0x23, 0x13, 0x95, 0xF6, 0x14, 0x72, 0x93, 0xB6, 0x8C, 0xEA, 0xB7, 0xA9, 0xE0, 0xC5, 0x8D,
                    0x86, 0x4E, 0x8E, 0xFD, 0xE4, 0xE1, 0xB9, 0xA4, 0x6C, 0xBE, 0x85, 0x47, 0x13, 0x67, 0x2F, 0x5C,
                    0xAA, 0xAE, 0x31, 0x4E, 0xD9, 0x08, 0x3D, 0xAB, 0x4B, 0x09, 0x9F, 0x8E, 0x30, 0x0F, 0x01, 0xB8,
                    0x65, 0x0F, 0x1F, 0x4B, 0x1D, 0x8F, 0xCF, 0x3F, 0x3C, 0xB5, 0x3F, 0xB8, 0xE9, 0xEB, 0x2E, 0xA2,
                    0x03, 0xBD, 0xC9, 0x70, 0xF5, 0x0A, 0xE5, 0x54, 0x28, 0xA9, 0x1F, 0x7F, 0x53, 0xAC, 0x26, 0x6B,
                    0x28, 0x41, 0x9C, 0x37, 0x78, 0xA1, 0x5F, 0xD2, 0x48, 0xD3, 0x39, 0xED, 0xE7, 0x85, 0xFB, 0x7F,
                    0x5A, 0x1A, 0xAA, 0x96, 0xD3, 0x13, 0xEA, 0xCC, 0x89, 0x09, 0x36, 0xC1, 0x73, 0xCD, 0xCD, 0x0F,
                    0xAB, 0x88, 0x2C, 0x45, 0x75, 0x5F, 0xEB, 0x3A, 0xED, 0x96, 0xD4, 0x77, 0xFF, 0x96, 0x39, 0x0B,
                    0xF9, 0xA6, 0x6D, 0x13, 0x68, 0xB2, 0x08, 0xE2, 0x1F, 0x7C, 0x10, 0xD0, 0x4A, 0x3D, 0xBD, 0x4E,
                    0x36, 0x06, 0x33, 0xE5, 0xDB, 0x4B, 0x60, 0x26, 0x01, 0xC1, 0x4C, 0xEA, 0x73, 0x7D, 0xB3, 0xDC,
                    0xF7, 0x22, 0x63, 0x2C, 0xC7, 0x78, 0x51, 0xCB, 0xDD, 0xE2, 0xAA, 0xF0, 0xA3, 0x3A, 0x07, 0xB3,
                    0x73, 0x44, 0x5D, 0xF4, 0x90, 0xCC, 0x8F, 0xC1, 0xE4, 0x16, 0x0F, 0xF1, 0x18, 0x37, 0x8F, 0x11,
                    0xF0, 0x47, 0x7D, 0xE0, 0x55, 0xA8, 0x1A, 0x9E, 0xDA, 0x57, 0xA4, 0xA2, 0xCF, 0xB0, 0xC8, 0x39,
                    0x29, 0xD3, 0x10, 0x91, 0x2F, 0x72, 0x9E, 0xC6, 0xCF, 0xA3, 0x6C, 0x6A, 0xC6, 0xA7, 0x58, 0x37,
                    0x14, 0x30, 0x45, 0xD7, 0x91, 0xCC, 0x85, 0xEF, 0xF5, 0xB2, 0x19, 0x32, 0xF2, 0x38, 0x61, 0xBC,
                    0xF2, 0x3A, 0x52, 0xB5, 0xDA, 0x67, 0xEA, 0xF7, 0xBA, 0xAE, 0x0F, 0x5F, 0xB1, 0x36, 0x9D, 0xB7,
                    0x8F, 0x3A, 0xC4, 0x5F, 0x8C, 0x4A, 0xC5, 0x67, 0x1D, 0x85, 0x73, 0x5C, 0xDD, 0xDB, 0x09, 0xD2,
                    0xB1, 0xE3, 0x4A, 0x1F, 0xC0, 0x66, 0xFF, 0x4A, 0x16, 0x2C, 0xB2, 0x63, 0xD6, 0x54, 0x12, 0x74,
                    0xAE, 0x2F, 0xCC, 0x86, 0x5F, 0x61, 0x8A, 0xBE, 0x27, 0xC1, 0x24, 0xCD, 0x8B, 0x07, 0x4C, 0xCD,
                    0x51, 0x63, 0x01, 0xB9, 0x18, 0x75, 0x82, 0x4D, 0x09, 0x95, 0x8F, 0x34, 0x1E, 0xF2, 0x74, 0xBD,
                    0xAB, 0x0B, 0xAE, 0x31, 0x63, 0x39, 0x89, 0x43, 0x04, 0xE3, 0x58, 0x77, 0xB0, 0xC2, 0x8A, 0x9B,
                    0x1F, 0xD1, 0x66, 0xC7, 0x96, 0xB9, 0xCC, 0x25, 0x8A, 0x06, 0x4A, 0x8F, 0x57, 0xE2, 0x7F, 0x2A}
            };
            _SHAKE256[1] = new TestCase
            {
                Input = new byte[200], // msg = 1600 bits, defined later
                Key = null,
                Result = new byte[] { 
                    0xCD, 0x8A, 0x92, 0x0E, 0xD1, 0x41, 0xAA, 0x04, 0x07, 0xA2, 0x2D, 0x59, 0x28, 0x86, 0x52, 0xE9,
                    0xD9, 0xF1, 0xA7, 0xEE, 0x0C, 0x1E, 0x7C, 0x1C, 0xA6, 0x99, 0x42, 0x4D, 0xA8, 0x4A, 0x90, 0x4D,
                    0x2D, 0x70, 0x0C, 0xAA, 0xE7, 0x39, 0x6E, 0xCE, 0x96, 0x60, 0x44, 0x40, 0x57, 0x7D, 0xA4, 0xF3,
                    0xAA, 0x22, 0xAE, 0xB8, 0x85, 0x7F, 0x96, 0x1C, 0x4C, 0xD8, 0xE0, 0x6F, 0x0A, 0xE6, 0x61, 0x0B,
                    0x10, 0x48, 0xA7, 0xF6, 0x4E, 0x10, 0x74, 0xCD, 0x62, 0x9E, 0x85, 0xAD, 0x75, 0x66, 0x04, 0x8E,
                    0xFC, 0x4F, 0xB5, 0x00, 0xB4, 0x86, 0xA3, 0x30, 0x9A, 0x8F, 0x26, 0x72, 0x4C, 0x0E, 0xD6, 0x28,
                    0x00, 0x1A, 0x10, 0x99, 0x42, 0x24, 0x68, 0xDE, 0x72, 0x6F, 0x10, 0x61, 0xD9, 0x9E, 0xB9, 0xE9,
                    0x36, 0x04, 0xD5, 0xAA, 0x74, 0x67, 0xD4, 0xB1, 0xBD, 0x64, 0x84, 0x58, 0x2A, 0x38, 0x43, 0x17,
                    0xD7, 0xF4, 0x7D, 0x75, 0x0B, 0x8F, 0x54, 0x99, 0x51, 0x2B, 0xB8, 0x5A, 0x22, 0x6C, 0x42, 0x43,
                    0x55, 0x6E, 0x69, 0x6F, 0x6B, 0xD0, 0x72, 0xC5, 0xAA, 0x2D, 0x9B, 0x69, 0x73, 0x02, 0x44, 0xB5,
                    0x68, 0x53, 0xD1, 0x69, 0x70, 0xAD, 0x81, 0x7E, 0x21, 0x3E, 0x47, 0x06, 0x18, 0x17, 0x80, 0x01,
                    0xC9, 0xFB, 0x56, 0xC5, 0x4F, 0xEF, 0xA5, 0xFE, 0xE6, 0x7D, 0x2D, 0xA5, 0x24, 0xBB, 0x3B, 0x0B,
                    0x61, 0xEF, 0x0E, 0x91, 0x14, 0xA9, 0x2C, 0xDB, 0xB6, 0xCC, 0xCB, 0x98, 0x61, 0x5C, 0xFE, 0x76,
                    0xE3, 0x51, 0x0D, 0xD8, 0x8D, 0x1C, 0xC2, 0x8F, 0xF9, 0x92, 0x87, 0x51, 0x2F, 0x24, 0xBF, 0xAF,
                    0xA1, 0xA7, 0x68, 0x77, 0xB6, 0xF3, 0x71, 0x98, 0xE3, 0xA6, 0x41, 0xC6, 0x8A, 0x7C, 0x42, 0xD4,
                    0x5F, 0xA7, 0xAC, 0xC1, 0x0D, 0xAE, 0x5F, 0x3C, 0xEF, 0xB7, 0xB7, 0x35, 0xF1, 0x2D, 0x4E, 0x58,
                    0x9F, 0x7A, 0x45, 0x6E, 0x78, 0xC0, 0xF5, 0xE4, 0xC4, 0x47, 0x1F, 0xFF, 0xA5, 0xE4, 0xFA, 0x05,
                    0x14, 0xAE, 0x97, 0x4D, 0x8C, 0x26, 0x48, 0x51, 0x3B, 0x5D, 0xB4, 0x94, 0xCE, 0xA8, 0x47, 0x15,
                    0x6D, 0x27, 0x7A, 0xD0, 0xE1, 0x41, 0xC2, 0x4C, 0x78, 0x39, 0x06, 0x4C, 0xD0, 0x88, 0x51, 0xBC,
                    0x2E, 0x7C, 0xA1, 0x09, 0xFD, 0x4E, 0x25, 0x1C, 0x35, 0xBB, 0x0A, 0x04, 0xFB, 0x05, 0xB3, 0x64,
                    0xFF, 0x8C, 0x4D, 0x8B, 0x59, 0xBC, 0x30, 0x3E, 0x25, 0x32, 0x8C, 0x09, 0xA8, 0x82, 0xE9, 0x52,
                    0x51, 0x8E, 0x1A, 0x8A, 0xE0, 0xFF, 0x26, 0x5D, 0x61, 0xC4, 0x65, 0x89, 0x69, 0x73, 0xD7, 0x49,
                    0x04, 0x99, 0xDC, 0x63, 0x9F, 0xB8, 0x50, 0x2B, 0x39, 0x45, 0x67, 0x91, 0xB1, 0xB6, 0xEC, 0x5B,
                    0xCC, 0x5D, 0x9A, 0xC3, 0x6A, 0x6D, 0xF6, 0x22, 0xA0, 0x70, 0xD4, 0x3F, 0xED, 0x78, 0x1F, 0x5F,
                    0x14, 0x9F, 0x7B, 0x62, 0x67, 0x5E, 0x7D, 0x1A, 0x4D, 0x6D, 0xEC, 0x48, 0xC1, 0xC7, 0x16, 0x45,
                    0x86, 0xEA, 0xE0, 0x6A, 0x51, 0x20, 0x8C, 0x0B, 0x79, 0x12, 0x44, 0xD3, 0x07, 0x72, 0x65, 0x05,
                    0xC3, 0xAD, 0x4B, 0x26, 0xB6, 0x82, 0x23, 0x77, 0x25, 0x7A, 0xA1, 0x52, 0x03, 0x75, 0x60, 0xA7,
                    0x39, 0x71, 0x4A, 0x3C, 0xA7, 0x9B, 0xD6, 0x05, 0x54, 0x7C, 0x9B, 0x78, 0xDD, 0x1F, 0x59, 0x6F,
                    0x2D, 0x4F, 0x17, 0x91, 0xBC, 0x68, 0x9A, 0x0E, 0x9B, 0x79, 0x9A, 0x37, 0x33, 0x9C, 0x04, 0x27,
                    0x57, 0x33, 0x74, 0x01, 0x43, 0xEF, 0x5D, 0x2B, 0x58, 0xB9, 0x6A, 0x36, 0x3D, 0x4E, 0x08, 0x07,
                    0x6A, 0x1A, 0x9D, 0x78, 0x46, 0x43, 0x6E, 0x4D, 0xCA, 0x57, 0x28, 0xB6, 0xF7, 0x60, 0xEE, 0xF0,
                    0xCA, 0x92, 0xBF, 0x0B, 0xE5, 0x61, 0x5E, 0x96, 0x95, 0x9D, 0x76, 0x71, 0x97, 0xA0, 0xBE, 0xEB}
            };

            for (int i = 0; i < 200; i++)
            {
                // all "0" index tests are empty arrays
                // set the "1" index tests to 200 bytes of 10100011 per the spec 
                // (the spec shows the bits in little-endian "absorb" order, not internal memory order)
                _SHA3_224[1].Input[i] = _SHA3_256[1].Input[i] = _SHA3_384[1].Input[i] = _SHA3_512[1].Input[i] = 0xA3;
                _SHAKE128[1].Input[i] = _SHAKE256[1].Input[i] = 0xA3;
            }

            //HMAC TESTS====================================================================================================
            _HSHA3_224[0] = new TestCase
            {
                Input = Encoding.ASCII.GetBytes("Sample message for keylen<blocklen"), Key = new byte[28], // key defined later
                Result = StringToBytes("332cfd59 347fdb8e 576e7726 0be4aba2 d6dc5311 7b3bfb52 c6d18c04")
            };

            _HSHA3_224[1] = new TestCase
            {
                Input = Encoding.ASCII.GetBytes("Sample message for keylen=blocklen"), Key = new byte[144],// key defined later
                Result = StringToBytes("d8b733bc f66c644a 12323d56 4e24dcf3 fc75f231 f3b67968 359100c7")
            };

            _HSHA3_224[2] = new TestCase
            {
                Input = Encoding.ASCII.GetBytes("Sample message for keylen>blocklen"), Key = new byte[172], // key defined later
                Result = StringToBytes("078695ee cc227c63 6ad31d06 3a15dd05 a7e819a6 6ec6d8de 1e193e59")
            };

            _HSHA3_224[3] = new TestCase
            {
                Input = Encoding.ASCII.GetBytes("Sample message for keylen<blocklen, with truncated tag"), Key = new byte[28], // key defined later
                Result = StringToBytes("8569c54c bb00a9b7 8ff1b391 b0e5")
            };

            _HSHA3_256[0] = new TestCase
            {
                Input = Encoding.ASCII.GetBytes("Sample message for keylen<blocklen"), Key = new byte[32], // key defined later
                Result = StringToBytes("4fe8e202 c4f058e8 dddc23d8 c34e4673 43e23555 e24fc2f0 25d598f5 58f67205")
            };

            _HSHA3_256[1] = new TestCase
            {
                Input = Encoding.ASCII.GetBytes("Sample message for keylen=blocklen"), Key = new byte[136],// key defined later
                Result = StringToBytes("68b94e2e 538a9be4 103bebb5 aa016d47 961d4d1a a9060613 13b557f8 af2c3faa")
            };

            _HSHA3_256[2] = new TestCase
            {
                Input = Encoding.ASCII.GetBytes("Sample message for keylen>blocklen"), Key = new byte[168], // key defined later
                Result = StringToBytes("9bcf2c23 8e235c3c e88404e8 13bd2f3a 97185ac6 f238c63d 6229a00b 07974258")
            };

            _HSHA3_256[3] = new TestCase
            {
                Input = Encoding.ASCII.GetBytes("Sample message for keylen<blocklen, with truncated tag"), Key = new byte[32], // key defined later
                Result = StringToBytes("c8dc7148 d8c1423a a549105d afdf9cad")
            };

            _HSHA3_384[0] = new TestCase
            {
                Input = Encoding.ASCII.GetBytes("Sample message for keylen<blocklen"), Key = new byte[48], // key defined later
                Result = StringToBytes("d588a3c5 1f3f2d90 6e8298c1 199aa8ff 62962181 27f6b38a 90b6afe2 c5617725 bc99987f 79b22a55 7b6520db 710b7f42")
            };

            _HSHA3_384[1] = new TestCase
            {
                Input = Encoding.ASCII.GetBytes("Sample message for keylen=blocklen"), Key = new byte[104],// key defined later
                Result = StringToBytes("a27d24b5 92e8c8cb f6d4ce6f c5bf62d8 fc98bf2d 486640d9 eb8099e2 4047837f 5f3bffbe 92dcce90 b4ed5b1e 7e44fa90")
            };

            _HSHA3_384[2] = new TestCase
            {
                Input = Encoding.ASCII.GetBytes("Sample message for keylen>blocklen"), Key = new byte[152], // key defined later
                Result = StringToBytes("e5ae4c73 9f455279 368ebf36 d4f5354c 95aa184c 899d3870 e460ebc2 88ef1f94 70053f73 f7c6da2a 71bcaec3 8ce7d6ac")
            };

            _HSHA3_384[3] = new TestCase
            {
                Input = Encoding.ASCII.GetBytes("Sample message for keylen<blocklen, with truncated tag"), Key = new byte[48], // key defined later
                Result = StringToBytes("25f4bf53 606e91af 79d24a4b b1fd6aec d44414a3 0c8ebb0a")
            };

            _HSHA3_512[0] = new TestCase
            {
                Input = Encoding.ASCII.GetBytes("Sample message for keylen<blocklen"), Key = new byte[64], // key defined later
                Result = StringToBytes("4efd629d 6c71bf86 162658f2 9943b1c3 08ce27cd fa6db0d9 c3ce8176 3f9cbce5 f7ebe986 8031db1a 8f8eb7b6 b95e5c5e 3f657a89 96c86a2f 6527e307 f0213196")
            };

            _HSHA3_512[1] = new TestCase
            {
                Input = Encoding.ASCII.GetBytes("Sample message for keylen=blocklen"), Key = new byte[72],// key defined later
                Result = StringToBytes("544e257e a2a3e5ea 19a590e6 a24b724c e6327757 723fe275 1b75bf00 7d80f6b3 60744bf1 b7a88ea5 85f9765b 47911976 d3191cf8 3c039f5f fab0d29c c9d9b6da")
            };

            _HSHA3_512[2] = new TestCase
            {
                Input = Encoding.ASCII.GetBytes("Sample message for keylen>blocklen"), Key = new byte[136], // key defined later
                Result = StringToBytes("5f464f5e 5b7848e3 885e49b2 c385f069 4985d0e3 8966242d c4a5fe3f ea4b37d4 6b65cece d5dcf594 38dd840b ab22269f 0ba7febd b9fcf746 02a35666 b2a32915")
            };

            _HSHA3_512[3] = new TestCase
            {
                Input = Encoding.ASCII.GetBytes("Sample message for keylen<blocklen, with truncated tag"), Key = new byte[64], // key defined later
                Result = StringToBytes("7bb06d85 9257b25c e73ca700 df34c5cb ef5c898b ac91029e 0b27975d 4e526a08")
            };

            byte[] tempHMACkey = new byte[172];
            for (int i = 0; i < 172; i++)
            {
                tempHMACkey[i] = (byte)i; // define the master array, values = index, ascending from 0 to [length - 1]
            }
            for (int j = 0; j < 4; j++)
            {   
                // fill each key array only to the correct length
                Buffer.BlockCopy(tempHMACkey, 0, _HSHA3_224[j].Key, 0, _HSHA3_224[j].Key.Length);
                Buffer.BlockCopy(tempHMACkey, 0, _HSHA3_256[j].Key, 0, _HSHA3_256[j].Key.Length);
                Buffer.BlockCopy(tempHMACkey, 0, _HSHA3_384[j].Key, 0, _HSHA3_384[j].Key.Length);
                Buffer.BlockCopy(tempHMACkey, 0, _HSHA3_512[j].Key, 0, _HSHA3_512[j].Key.Length);
            }
        }

        public static byte[] StringToBytes(string data)
        {
            data = data.Replace(" ", "").Replace("\r", "").Replace("\n", "").Replace("-", "").Trim();
            byte[] result = new byte[data.Length / 2];
            for (int i = 0; i < data.Length; i+=2)
            {
                result[i / 2] = byte.Parse(data.Substring(i, 2), System.Globalization.NumberStyles.HexNumber | System.Globalization.NumberStyles.AllowHexSpecifier);
            }
            return result;
        }
    }
}
